openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /users/{id}:
    get:
      tags:
      - user-controller
      summary: Get user by its id
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userr'
    put:
      tags:
      - user-controller
      summary: Edit a user
      operationId: edit
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Userr'
        required: true
      responses:
        "404":
          description: User not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: User edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userr'
    delete:
      tags:
      - user-controller
      summary: Delete a user by its id
      operationId: deleteById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: User not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userr'
  /comments/{id}:
    get:
      tags:
      - comment-controller
      summary: Get a comment by its id
      operationId: findById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Found the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment_Comment'
    put:
      tags:
      - comment-controller
      summary: Edit a comment
      operationId: edit_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "404":
          description: Comment not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Comment edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags:
      - comment-controller
      summary: Delete a comment by its id
      operationId: deleteById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Comment deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /books/{id}:
    get:
      tags:
      - book-controller
      summary: Get a book by its id
      operationId: findById_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Found the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_Book'
    put:
      tags:
      - book-controller
      summary: Edit a book
      operationId: edit_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "404":
          description: Book not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Book edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
      - book-controller
      summary: Delete a book by its id
      operationId: deleteById_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Book deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /users/:
    get:
      tags:
      - user-controller
      summary: Get a all users
      operationId: findAll
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: Get all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
    post:
      tags:
      - user-controller
      summary: Saves a user
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Userr'
        required: true
      responses:
        "404":
          description: User not saved
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: User saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userr'
  /comments/:
    get:
      tags:
      - comment-controller
      summary: Get a all the comments
      operationId: findAll_1
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: Get all comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
    post:
      tags:
      - comment-controller
      summary: Saves a comment
      operationId: save_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "404":
          description: Book not saved
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Comment saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /books/:
    get:
      tags:
      - book-controller
      summary: Get a all the books
      operationId: findAll_2
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: Get all books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
    post:
      tags:
      - book-controller
      summary: Saves a book
      operationId: save_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "404":
          description: Book not saved
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Book saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /comments/author/{id}:
    get:
      tags:
      - comment-controller
      summary: Get by author id
      operationId: findByAuthorId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: User not found
          content: {}
        "400":
          description: Invalid id supplied
        "200":
          description: Get by author id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
  /books/titles:
    get:
      tags:
      - book-controller
      summary: Get book titles
      operationId: findAllTitles
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: Get book titles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
components:
  schemas:
    Userr:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        email:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/Userr'
        comment:
          type: string
        points:
          type: integer
          format: int32
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        resume:
          type: string
        author:
          $ref: '#/components/schemas/Userr'
        editorial:
          type: string
        publicationDate:
          type: string
          format: date
        commentList:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    Page:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            type: object
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    Comment_Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/Userr_Comment'
    Userr_Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        email:
          type: string
    Book_Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        resume:
          type: string
        author:
          $ref: '#/components/schemas/Userr_Book'
        editorial:
          type: string
        publicationDate:
          type: string
          format: date
        commentList:
          type: array
          items:
            $ref: '#/components/schemas/Comment_Book'
    Comment_Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/Userr_Book'
        comment:
          type: string
        points:
          type: integer
          format: int32
    Userr_Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        email:
          type: string
